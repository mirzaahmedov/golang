// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContactProviderClient is the client API for ContactProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactProviderClient interface {
	GetAll(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Contacts, error)
	Add(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Id, error)
	Remove(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Contact, error)
	Update(ctx context.Context, in *ContactUpdate, opts ...grpc.CallOption) (*Contact, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Contact, error)
}

type contactProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewContactProviderClient(cc grpc.ClientConnInterface) ContactProviderClient {
	return &contactProviderClient{cc}
}

func (c *contactProviderClient) GetAll(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Contacts, error) {
	out := new(Contacts)
	err := c.cc.Invoke(ctx, "/api.ContactProvider/getAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactProviderClient) Add(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/api.ContactProvider/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactProviderClient) Remove(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/api.ContactProvider/remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactProviderClient) Update(ctx context.Context, in *ContactUpdate, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/api.ContactProvider/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactProviderClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/api.ContactProvider/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactProviderServer is the server API for ContactProvider service.
// All implementations must embed UnimplementedContactProviderServer
// for forward compatibility
type ContactProviderServer interface {
	GetAll(context.Context, *Test) (*Contacts, error)
	Add(context.Context, *Contact) (*Id, error)
	Remove(context.Context, *Id) (*Contact, error)
	Update(context.Context, *ContactUpdate) (*Contact, error)
	Get(context.Context, *Id) (*Contact, error)
	mustEmbedUnimplementedContactProviderServer()
}

// UnimplementedContactProviderServer must be embedded to have forward compatible implementations.
type UnimplementedContactProviderServer struct {
}

func (UnimplementedContactProviderServer) GetAll(context.Context, *Test) (*Contacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedContactProviderServer) Add(context.Context, *Contact) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedContactProviderServer) Remove(context.Context, *Id) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedContactProviderServer) Update(context.Context, *ContactUpdate) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContactProviderServer) Get(context.Context, *Id) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContactProviderServer) mustEmbedUnimplementedContactProviderServer() {}

// UnsafeContactProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactProviderServer will
// result in compilation errors.
type UnsafeContactProviderServer interface {
	mustEmbedUnimplementedContactProviderServer()
}

func RegisterContactProviderServer(s grpc.ServiceRegistrar, srv ContactProviderServer) {
	s.RegisterService(&ContactProvider_ServiceDesc, srv)
}

func _ContactProvider_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactProviderServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ContactProvider/getAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactProviderServer).GetAll(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactProvider_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactProviderServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ContactProvider/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactProviderServer).Add(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactProvider_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactProviderServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ContactProvider/remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactProviderServer).Remove(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactProvider_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactProviderServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ContactProvider/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactProviderServer).Update(ctx, req.(*ContactUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactProvider_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactProviderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ContactProvider/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactProviderServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactProvider_ServiceDesc is the grpc.ServiceDesc for ContactProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ContactProvider",
	HandlerType: (*ContactProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAll",
			Handler:    _ContactProvider_GetAll_Handler,
		},
		{
			MethodName: "add",
			Handler:    _ContactProvider_Add_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _ContactProvider_Remove_Handler,
		},
		{
			MethodName: "update",
			Handler:    _ContactProvider_Update_Handler,
		},
		{
			MethodName: "get",
			Handler:    _ContactProvider_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
